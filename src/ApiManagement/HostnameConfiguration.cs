// Licensed under the MIT License.  See LICENSE in the project root for license information.

using System;
using System.CodeDom.Compiler;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using AzureDesignStudio.AzureResources.Base;

namespace AzureDesignStudio.AzureResources.ApiManagement
{
    /// <summary>
    /// Custom hostname configuration.
    /// </summary>
    [GeneratedCode("ArmTypeGenerator", "0.1.8.0")]
    public partial class HostnameConfiguration
    {
        /// <summary>
        /// SSL certificate information.
        /// </summary>
        [JsonPropertyName("certificate")]
        public CertificateInformation Certificate { get; set; }

        /// <summary>
        /// Certificate Password.
        /// </summary>
        [JsonPropertyName("certificatePassword")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// Certificate Source.
        /// </summary>
        [JsonPropertyName("certificateSource")]
        public string CertificateSource { get; set; }

        /// <summary>
        /// Certificate Status.
        /// </summary>
        [JsonPropertyName("certificateStatus")]
        public string CertificateStatus { get; set; }

        /// <summary>
        /// Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
        /// </summary>
        [JsonPropertyName("defaultSslBinding")]
        public bool DefaultSslBinding { get; set; }

        /// <summary>
        /// Base64 Encoded certificate.
        /// </summary>
        [JsonPropertyName("encodedCertificate")]
        public string EncodedCertificate { get; set; }

        /// <summary>
        /// Hostname to configure on the Api Management service.
        /// </summary>
        [Required]
        [JsonPropertyName("hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
        /// </summary>
        [JsonPropertyName("identityClientId")]
        public string IdentityClientId { get; set; }

        /// <summary>
        /// Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
        /// </summary>
        [JsonPropertyName("keyVaultId")]
        public string KeyVaultId { get; set; }

        /// <summary>
        /// Specify true to always negotiate client certificate on the hostname. Default Value is false.
        /// </summary>
        [JsonPropertyName("negotiateClientCertificate")]
        public bool NegotiateClientCertificate { get; set; }

        /// <summary>
        /// Hostname type.
        /// </summary>
        [Required]
        [JsonPropertyName("type")]
        public string Type { get; set; }
    }
}